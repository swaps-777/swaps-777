import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb

A = pd.read_csv("D:/Datasets/Iris.csv")
A.head()

sb.heatmap(A.corr())
A.corr()

# RIDGE REGRESSION
m = 2e-06
q=[]
for i in range(1,1000,1):
   m = m + 2e-06
   q.append(m)
   
   
X = A[["Petal.Width","Sepal.Length"]]
Y = A[["Petal.Length"]]

from sklearn.linear_model import Ridge,Lasso
rd = Ridge()
from sklearn.model_selection import GridSearchCV
tp = {"alpha":q}
cv = GridSearchCV(rd,tp,scoring="neg_mean_absolute_error",cv=4)
cvmodel = cv.fit(X,Y)

cvmodel.best_params_


X = A[["Petal.Width","Sepal.Length"]]
Y = A[["Petal.Length"]]
from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(X,Y,test_size=.2,random_state=20)

from sklearn.linear_model import Ridge,Lasso
ls = Lasso()

from sklearn.model_selection import GridSearchCV
tp = {"alpha":q}
cv = GridSearchCV(ls,tp,scoring="neg_mean_squared_error",cv=4)
cvmodel = cv.fit(xtrain,ytrain)
x=cvmodel.best_params_['alpha']
ls = Lasso(alpha=x)
model = ls.fit(xtrain,ytrain)
pred = model.predict(xtest)
from sklearn.metrics import mean_absolute_error
print("%.5f"%(mean_absolute_error(ytest,pred)))


# LASSO REGRESSION

X = A[["Petal.Width","Sepal.Length"]]
Y = A[["Petal.Length"]]
from sklearn.linear_model import Ridge,Lasso
ls = Lasso()
from sklearn.model_selection import GridSearchCV
tp = {"alpha":q}
cv = GridSearchCV(ls,tp,scoring="neg_mean_absolute_error",cv=4)
cvmodel = cv.fit(X,Y)

cvmodel.best_params_

X = A[["Petal.Width","Sepal.Length"]]
Y = A[["Petal.Length"]]
from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(X,Y,test_size=.2,random_state=20)

from sklearn.linear_model import Ridge,Lasso
rd = Ridge()

from sklearn.model_selection import GridSearchCV
tp = {"alpha":q}
cv = GridSearchCV(rd,tp,scoring="neg_mean_squared_error",cv=4)
cvmodel = cv.fit(xtrain,ytrain)
x=cvmodel.best_params_['alpha']
rd = Ridge(alpha=x)
model = rd.fit(xtrain,ytrain)
pred = model.predict(xtest)
from sklearn.metrics import mean_absolute_error
print("%.5f"%(mean_absolute_error(ytest,pred)))

q

rr = Ridge(alpha=2e-05)
